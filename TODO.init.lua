-- 
-- TODO 
-- autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
-- autocmd InsertLeave * if pumvisible() == 0|pclose|endif
-- TODO --
--
-- TODO ---
-- " autocmd BufWritePre * lua vim.lsp.buf.formatting()
-- " highlight white spaces in RED
-- highlight ExtraWhitespace guibg=grey
-- au ColorScheme * highlight ExtraWhitespace guibg=grey
-- au BufEnter * match ExtraWhitespace /\s\+$/
-- au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
-- au InsertLeave * match ExtraWhiteSpace /\s\+$/
-- TODO ---
--
--
-- random functions
--
-- " Rename current file
-- function! RenameFile()
--     let old_name = expand('%')
--     let new_name = input('New file name: ', expand('%'), 'file')
--     if new_name != '' && new_name != old_name
--         exec ':saveas ' . new_name
--         exec ':silent !rm ' . old_name
--         redraw!
--     endif
-- endfunction

-- """""""""""""""""""""" MAPPINGS """"""""""""""""""""""""""""""""

-- " quick list and location list
-- nnoremap <leader>qo :copen<CR>
-- nnoremap <leader>qc :cclose<CR>

-- " Rename File
-- map <leader>n :call RenameFile()<cr>

-- " Show undo list
-- nnoremap <leader>u :GundoToggle<CR>
--
-- TODO, do I need vim markdown at all?
--
-- " Tab and Shift-Tab in normal mode to navigate buffers
-- map <Tab> :bnext<CR>
-- map <S-Tab> :bprevious<CR>

-- " Git
-- nnoremap <leader>nh :GitGutterNextHunk<CR>
-- nnoremap <leader>ph :GitGutterPrevHunk<CR>
-- nnoremap <leader>sh :GitGutterStageHunk<CR>
-- nnoremap <leader>gc :Git commit<CR>
-- nnoremap <leader>gp :Git push<CR>
--
-- """""""""""""""""""""LSP TROUBLE"""""""""""""""""""""""""""""""""
-- nnoremap <leader>xx <cmd>TroubleToggle<cr>
-- nnoremap <leader>xw <cmd>TroubleToggle lsp_workspace_diagnostics<cr>
-- nnoremap <leader>xd <cmd>TroubleToggle lsp_document_diagnostics<cr>
-- nnoremap <leader>xq <cmd>TroubleToggle quickfix<cr>
-- nnoremap <leader>xl <cmd>TroubleToggle loclist<cr>
-- nnoremap gR <cmd>TroubleToggle lsp_references<cr>
-- """""""""""""""""""""LSP TROUBLE"""""""""""""""""""""""""""""""""
--
-- function! s:list_buffers()
--   redir => list
--   silent ls
--   redir END
--   return split(list, "\n")
-- endfunction

-- command! BD call fzf#run(fzf#wrap({
--   \ 'source': s:list_buffers(),
--   \ 'sink*': { lines -> s:delete_buffers(lines) },
--   \ 'options': '--multi --reverse --bind ctrl-a:select-all+accept'
--   \ }))

-- function! s:delete_buffers(lines)
--   execute 'bwipeout!' join(map(a:lines, {_, line -> split(line)[0]}))
-- endfunction


-- function! ToggleGenericFormat()
--   let g:neoformat_basic_format_retab = !g:neoformat_basic_format_retab
--   let g:neoformat_basic_format_trim = !g:neoformat_basic_format_retab
-- endfunction

-- let g:neoformat_prettier = {
--   \ 'exe': '/etc/profiles/per-user/pepo/bin/prettier',
--   \ 'args': ['--stdin-filepath', '"%:p"'],
--   \ 'stdin': 1,
--   \ }
--
--
-- v.g.neoformat_javascript_prettier = v.g.neoformat_prettier
-- v.g.neoformat_enabled_javascript = ['prettier']
-- v.g.neoformat_json_prettier = g:neoformat_prettier
-- v.g.neoformat_enabled_json = ['prettier']
-- v.g.neoformat_css_prettier = g:neoformat_prettier
-- v.g.neoformat_enabled_css = ['prettier']
-- v.g.neoformat_typescript_prettier = g:neoformat_prettier
-- v.g.neoformat_enabled_typescript = ['prettier']
-- v.g.neoformat_yaml_prettier = g:neoformat_prettier
-- v.g.neoformat_enabled_yaml = ['prettier']
--
-- THIS is the command for BufWritePre
  -- command = 'try | undojoin | Neoformat | catch /^Vim\%((\a\+)\)\=:E790/ | finally | silent Neoformat | endtry'
