snippet def "defines a new function with a multiline block" !b
def ${1:name}(${2:params}) do
  $3
end
endsnippet

snippet defl "defines a new function" !b
def ${1:name}(${2:params}), do: $3
endsnippet

snippet err "error tuple" !b
{ :error, ${1:error} }
endsnippet

snippet defp "defines a private method with a multiline block" !b
defp ${1:name}(${2:params}) do
  $3
end
endsnippet

snippet defpl "defines a new private function" !b
defp ${1:name}(${2:params}), do: $3
endsnippet

snippet defc "defines a behavior callback" !b
defcallback ${1:name}(${2:params})
endsnippet

snippet defm "defines a macro" !b
defmacro ${1:name}(${2:params}) do
  $3
end
endsnippet

snippet qt "define a quote block" !b
quote do
  $1
end
endsnippet

snippet qtl "defines a quote block inline" !b
quote do: $1
endsnippet

snippet mod "defines a new module" !b
defmodule ${1:name} do
  $2
end
endsnippet

snippet ht "inserts a [head | tail]" !i
[${1:head}|${2:tail}]
endsnippet

snippet test "add a test case" !b
test "${1:description}" do
  $2
end
endsnippet

snippet genserver "create genserver boilerplate" !b
use GenServer

defmodule State do
  defstruct []
end

def start_link(_args) do
  GenServer.start_link(__MODULE__, nil, name: __MODULE__)
end

def init(_args) do
  {:ok, %State{}}
end

endsnippet

snippet app_mod "create genserver boilerplate" !b
defmodule ${1}.Application do
  # See https://hexdocs.pm/elixir/Application.html
  # for more information on OTP Applications
  @moduledoc false

  use Application

  def start(_type, _args) do
    children = [
      {${1}.Worker, []}
    ]

    # See https://hexdocs.pm/elixir/Supervisor.html
    # for other strategies and supported options
    opts = [strategy: :one_for_one, name: Naive.Application]
    Supervisor.start_link(children, opts)
  end
end

endsnippet

snippet if "add an if block" !b
if ${1:condition} do
  $2
end
endsnippet

snippet ife "add an if-else block" !b
if ${1:condition} do
  $2
else
  $3
end
endsnippet

snippet inspect "inspect an expression result" !b
IO.puts """
#############################
#{inspect($1)}
#############################
"""
endsnippet

snippet fn "insert an anonymous function" !i
fn(${1:args}) -> ${2} end
endsnippet

snippet & "insert an anonymous function short syntax" !i
&($1)
endsnippet

snippet doc "insert a function documentation block" !b
@doc """
${1}
"""
endsnippet

snippet mdoc "insert a module documentation block" !b
@moduledoc """
${1}
"""
endsnippet

snippet # "insert a string interpolation" !i
#{${1}}$2
endsnippet

snippet | "insert a pipe operator" !i
|>
endsnippet

snippet |i "insert a pipe to io.inspect" !i
|> io.inspect
endsnippet

snippet using "insert using macro" !b
defmacro __using__(opts) do
  $1
end
endsnippet

snippet before_compile "insert before_compile macro" !b
defmacro __before_compile__(env) do
  $1
end
endsnippet

snippet cpub "insert comment denoting public functions" !i
# public ###################################################
endsnippet

snippet cpubapi "insert comment denoting public api functions" !i
# public api ###############################################
endsnippet

snippet cpriv "insert comment denoting private functions" !i
# private ##################################################
endsnippet

snippet cprivapi "insert comment denoting private api functions" !i
# private api ##############################################
endsnippet

snippet cmixin "insert comment denoting mixin option functions" !i
# mixin options ############################################
endsnippet

snippet ipry "insert iex pry for debugging" !b
require iex; iex.pry
endsnippet

snippet	ip "insert io.puts" !b
io.puts
endsnippet

snippet	ii "insert io.inspect" !b
io.inspect
endsnippet

snippet con "insert an espec context" !b
context "${1}"
endsnippet

snippet context "insert an espec context with block" !b
context "${1}" do
  ${2}
end
endsnippet

snippet des "insert an espec describe" !b
describe "${1}"
endsnippet

snippet describe "insert an espec describe with block" !b
describe "${1}" do
  ${2}
end
endsnippet

snippet lt "insert an espec let on one line" !b
let :${1:name}, do: ${2}
endsnippet

snippet let "insert an espec let" !b
let :${1:name} do
  ${2}
end
endsnippet

snippet sub "insert an espec subject on one line" !b
subject do: ${1}
endsnippet

snippet subj "insert an espec subject" !b
subject do
	${1}
end
endsnippet

snippet it "insert an espec it on one line" !b
it do: ${1}
endsnippet

snippet itd "insert an espec it with a do" !b
it "${1}" do
  ${2}
end
endsnippet

snippet before "insert an espec before with block" !b
before do
  ${1}
end
endsnippet

snippet allow "insert an espec allow" !b
allow ${1} |> to(${2})
endsnippet

snippet	expect "insert an espec expect" !b
expect ${1} |> to(${2})
endsnippet
